// Generated by CoffeeScript 1.9.3

/*
 * 
 * @options
 * - vid - ビデオID
 * - autoPlay - 自動で再生を開始
 * - onReady - 準備完了時
 * - onPlaying - 再生開始時
 * - onEnded - 再生が終わった時
 * - onPaused - 再生を停止した時
 * - onBuffering - buffering
 * - onCued - cued
 *
 */
(function() {
  return module.exports = function(target, options) {
    var firstScriptTag, key, params, player, tag, value;
    tag = document.createElement('script');
    tag.src = "https://www.youtube.com/player_api";
    firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
    target = require('./_element')(target);
    player = null;
    params = {
      videoId: options.id || options.vid || options.videoId || options.video_id || options.videoid,
      width: '640',
      height: '390',
      events: {
        onReady: function(event) {
          if (typeof options.onReady === "function") {
            options.onReady(event);
          }
          if (options.autoPlay) {
            return event.target.playVideo();
          }
        },
        onStateChange: function(event) {
          if (typeof options.onStateChange === "function") {
            options.onStateChange(event);
          }
          if (event.data === YT.PlayerState.PLAYING) {
            return typeof options.onPlaying === "function" ? options.onPlaying(event) : void 0;
          } else if (event.data === YT.PlayerState.ENDED) {
            return typeof options.onEnded === "function" ? options.onEnded(event) : void 0;
          } else if (event.data === YT.PlayerState.PAUSED) {
            return typeof options.onPaused === "function" ? options.onPaused(event) : void 0;
          } else if (event.data === YT.PlayerState.BUFFERING) {
            return typeof options.onBuffering === "function" ? options.onBuffering(event) : void 0;
          } else if (event.data === YT.PlayerState.CUED) {
            return typeof options.onCued === "function" ? options.onCued(event) : void 0;
          }
        }
      }
    };
    for (key in options) {
      value = options[key];
      params[key] = value;
    }
    window.onYouTubePlayerAPIReady = function() {
      return player = new YT.Player(target, params);
    };
    return {
      getPlayer: function() {
        return player;
      }
    };
  };
})();
